#!/bin/bash
#
#  Copyright 2005 Red Hat, Inc.
#  Author:  Jeff Moyer <jmoyer@redhat.com>
#  Modifications for SUSE from Chris Mason <mason@suse.com>
#                              Takashi Iwai <tiwai@suse.de>
#                              Bernhard Walle <bwalle@suse.de>
#
#  kdump
#
#  Description:  The kdump init script provides the support necessary for
#                loading a kdump kernel into memory at system bootup time.
#
#
# /etc/init.d/boot.kdump
### BEGIN INIT INFO
# Provides:       boot.kdump
# Required-Start: $local_fs boot.localnet
# Should-Start:
# Should-Stop:
# Required-Stop:  $local_fs boot.localnet
# Default-Start:  B
# Default-Stop:
# Short-Description: kdump boot configuration
# Description:    This script loads the kdump kernel on startup.
### END INIT INFO

KDUMPTOOL=/usr/sbin/kdumptool
LOAD_KDUMP=/usr/lib/kdump/load.sh
UNLOAD_KDUMP=/usr/lib/kdump/unload.sh

. /etc/rc.status

#
# Checks if currently a kdump kernel is loaded.
#
# Returns: 0 (true) if a kdump kernel is loaded,
#          1 (false) if the kdump kernel is not loaded and
#          -1 (false) if the feature is not implemented (too old kernel)
function kdump_kernel_loaded()
{
    eval $($KDUMPTOOL dump_config)
    if [ "$KDUMP_FADUMP" = "true" ] ; then
	if [ -r /sys/kernel/fadump_registered ] ; then
	    if [ $(cat /sys/kernel/fadump_registered) = "1" ] ; then
		return 0
	    else
		return 1
	    fi
	else
	    return -1
	fi
    elif [ -r /sys/kernel/kexec_crash_loaded ] ; then
        if [ $(cat /sys/kernel/kexec_crash_loaded) = "1" ] ; then
            return 0
        else
            return 1
        fi
    else
        return -1
    fi
}

case "$1" in
  start|restart|force-reload)
	echo -n "Loading kdump"
        $LOAD_KDUMP
	rc_status
        ;;
  stop)
        if [ "$RUNLEVEL" != "" ]; then
            echo -n "Not unloading kdump during runlevel changes"
            rc_status -s
        else
            if kdump_kernel_loaded ; then
                echo -n "Unloading kdump"
		$UNLOAD_KDUMP
            fi
            rc_status -v
        fi
        ;;
  status)
        kdump_kernel_loaded
        case $? in
             0)     echo "kdump kernel loaded"
                    rc_status -r -v
                    ;;
             1)     echo "kdump kernel not loaded"
                    rc_failed
                    rc_status -v
                    ;;
            -1)     echo "not implemented"
                    rc_failed 4
                    rc_status -v
                    ;;
        esac
        ;;
  try-restart)
        if kdump_kernel_loaded ; then
	    echo "Loading kdump"
            $LOAD_KDUMP
        else
            rc_reset
        fi
        rc_status
        ;;
  reload)
        rc_failed 3
        rc_status
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
        exit 1
esac

rc_exit

# vim: set ts=4 sw=4 et:
